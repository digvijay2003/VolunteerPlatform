<div class="d-flex align-items-center justify-content-center"
     style="min-height: 100vh; background: white;">

  <div class="container-fluid mx-3" style="width: 100%; background: rgba(255, 255, 255, 0.92); border-radius: 1rem; box-shadow: 0 8px 24px rgba(0,0,0,0.1); padding: .3rem; backdrop-filter: blur(8px);">
    
    <!-- Title -->
    <h2 class="text-center fw-bold mb-3"
        style="color: #031d38; font-size: 2.25rem; letter-spacing: -0.5px;"> <%= title %> </h2>

    <!-- Alert / Info -->
    <div class="mb-5" 
         style="background-color: #e8f8ff; padding: 1.5rem 2rem; border-left: 5px solid #17a2b8; border-radius: 0.75rem; color: #005f73;">
      <h5 class="fw-semibold mb-2" style="font-size: 1rem;">
        <i class="bi bi-exclamation-triangle-fill me-2"></i> Please read the guidelines carefully:
      </h5>
      <ul style="margin-bottom: 0; padding-left: 1.25rem; line-height: 1.75;">
        <li>Username must be at least 3 characters long.</li>
        <li>Phone number format: <code>+91 98050xxxxx</code>.</li>
        <li>Govt ID (JPG/PNG/PDF) must be ≤ 100KB.</li>
        <li>Password must be ≥ 8 characters.</li>
        <li>A valid email is required.</li>
        <li>Location & availability are mandatory.</li>
        <li>Emergency contact name is required.</li>
      </ul>
    </div>

    <!-- Form Starts -->
    <form action="<%= action %>" method="POST" enctype="multipart/form-data" class="needs-validation" novalidate>
      <div class="row g-4">
        <% fields.forEach(field => { %>
          <div class="col-md-6 col-lg-4">
            <label for="<%= field.id %>" class="form-label fw-semibold" style="color: #333;"><%= field.label %></label>

            <% if (field.type === 'select') { %>
              <select id="<%= field.id %>" name="<%= field.name %>" class="form-select form-control-lg"
                      <%= field.multiple ? 'multiple' : '' %>
                      <%= field.required ? 'required' : '' %>
                      style="border-radius: 0.5rem; padding: 0.65rem 1.25rem;">
                <option selected disabled value="">Choose...</option>
                <% field.options.forEach(option => { %>
                  <option value="<%= option.value %>"><%= option.label %></option>
                <% }) %>
              </select>
              <% if (field.description) { %>
                <div class="form-text" style="color: #6c757d;"><%= field.description %></div>
              <% } %>
              <div class="invalid-feedback">Please select a valid <%= field.label.toLowerCase() %>.</div>

            <% } else if (field.type === 'file') { %>
              <input type="file" class="form-control form-control-lg" id="<%= field.id %>" name="<%= field.name %>"
                     <%= field.multiple ? 'multiple' : '' %> <%= field.required ? 'required' : '' %>
                     style="border-radius: 0.5rem; padding: 0.65rem 1.25rem;">
              <div class="form-text" style="color: #6c757d;">
                <%= field.description || 'Accepted formats: JPG, PNG, PDF. Max size: 100KB.' %>
              </div>
              <div class="invalid-feedback">Please upload a valid file.</div>

            <% } else { %>
              <input type="<%= field.type %>" class="form-control form-control-lg"
                     id="<%= field.id %>" name="<%= field.name %>"
                     value="<%= field.value || '' %>" <%= field.attributes || '' %>
                     <%= field.required ? 'required' : '' %>
                     style="border-radius: 0.5rem; padding: 0.65rem 1.25rem;">
              <% if (field.description) { %>
                <div class="form-text" style="color: #6c757d;"><%= field.description %></div>
              <% } %>
              <div class="invalid-feedback">
                <% if (field.id === 'username') { %>
                  Username must be at least 3 characters.
                <% } else if (field.id === 'email') { %>
                  Please enter a valid email address.
                <% } else if (field.id === 'password') { %>
                  Password must be at least 8 characters.
                <% } else if (field.id === 'phone') { %>
                  Valid phone format required.
                <% } else { %>
                  This field is required.
                <% } %>
              </div>
            <% } %>
          </div>
        <% }) %>
      </div>

      <!-- Submit Button -->
      <div class="text-center my-3 d-grid gap-2 col-6 mx-auto">
        <button type="submit" 
                class="btn btn-primary btn-lg px-5 rounded-pill shadow-sm"
                style="font-weight: 600; background-color: #007bff; border: none; transition: all 0.2s ease;"
                onmouseover="this.style.backgroundColor='#0056b3'; this.style.transform='translateY(-2px)';"
                onmouseout="this.style.backgroundColor='#007bff'; this.style.transform='translateY(0)';">
          <%= submitLabel || 'Register Now' %> <i class="bi bi-arrow-right-short"></i>
        </button>
      </div>
    </form>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eZGBYHT1L" crossorigin="anonymous"></script>
<script>
    (function () {
      'use strict'

      // Fetch all the forms we want to apply custom Bootstrap validation styles to
      const forms = document.querySelectorAll('.needs-validation')

      // Loop over them and prevent submission
      Array.from(forms).forEach(form => {
        form.addEventListener('submit', event => {
          // Clear all custom invalid feedback messages before validation
          form.querySelectorAll('.invalid-feedback').forEach(feedback => {
              feedback.textContent = '';
          });

          if (!form.checkValidity()) {
            event.preventDefault();
            event.stopPropagation();
            // If Bootstrap's default validation fails, ensure specific messages are shown if available
            form.querySelectorAll(':invalid').forEach(field => {
                const feedbackDiv = field.nextElementSibling; // This assumes invalid-feedback is directly after the input/select
                if (feedbackDiv && feedbackDiv.classList.contains('invalid-feedback')) {
                    if (field.id === 'username') {
                        feedbackDiv.textContent = 'Username must be at least 3 characters.';
                    } else if (field.id === 'email') {
                        feedbackDiv.textContent = 'Please enter a valid email address.';
                    } else if (field.id === 'password') {
                        feedbackDiv.textContent = 'Password must be at least 8 characters.';
                    } else if (field.id === 'phone') {
                        feedbackDiv.textContent = 'Please enter a valid phone number (e.g., +91 98050xxxx).';
                    } else if (!feedbackDiv.textContent) { // Only set generic if no specific message is defined
                        feedbackDiv.textContent = 'This field is required.';
                    }
                }
            });
          }

          const fileInput = document.getElementById("governmentIdProofs");
          const fileErrorDiv = document.getElementById("governmentIdProofs-error");

          if (fileInput) {
            const files = fileInput.files;
            fileErrorDiv.textContent = ''; // Clear previous errors
            fileInput.classList.remove('is-invalid'); // Clear invalid state before re-evaluating

            let fileInvalid = false;
            if (files.length === 0 && fileInput.required) {
                fileErrorDiv.textContent = "Please upload a file for Government ID.";
                fileInvalid = true;
            } else {
                for (let file of files) {
                    if (file.size > 100 * 1024) {
                        fileErrorDiv.textContent = "File size must not exceed 100KB.";
                        fileInvalid = true;
                        break;
                    }

                    if (!['image/png', 'image/jpg', 'image/jpeg', 'application/pdf'].includes(file.type)) {
                        fileErrorDiv.textContent = "Only PNG, JPG, JPEG, and PDF files are allowed.";
                        fileInvalid = true;
                        break;
                    }
                }
            }
            

            if (fileInvalid) {
              event.preventDefault();
              event.stopPropagation();
              fileInput.classList.add('is-invalid');
            } else {
              fileInput.classList.remove('is-invalid');
            }
          }
          
          form.classList.add('was-validated');
        }, false); 
      });
    })();
</script>